// Functions for KoloCollect SCSS
// These provide utility functionality for calculations and transformations

// Color functions

/// Slightly lighten a color
/// @param {Color} $color - The color to lighten
/// @param {Number} $percentage - The percentage by which to lighten (0-100)
/// @return {Color}
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

/// Slightly darken a color
/// @param {Color} $color - The color to darken
/// @param {Number} $percentage - The percentage by which to darken (0-100)
/// @return {Color}
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

/// Function to create a transparent version of a color
/// @param {Color} $color - The base color
/// @param {Number} $alpha - The alpha level (0-1)
/// @return {Color}
@function transparent-color($color, $alpha) {
  @return rgba($color, $alpha);
}

/// Check if a color is light or dark
/// @param {Color} $color - The color to check
/// @return {Boolean} - True if the color is light
@function is-light-color($color) {
  $red: red($color);
  $green: green($color);
  $blue: blue($color);
  
  $lightness: ($red * 299 + $green * 587 + $blue * 114) / 1000;
  
  @return $lightness >= 128;
}

/// Get appropriate text color for a background
/// @param {Color} $background - The background color
/// @param {Color} $light-color [white] - The color to use on dark backgrounds
/// @param {Color} $dark-color [black] - The color to use on light backgrounds
/// @return {Color}
@function contrast-color($background, $light-color: white, $dark-color: black) {
  @if is-light-color($background) {
    @return $dark-color;
  } @else {
    @return $light-color;
  }
}

// Sizing and spacing functions

/// Convert pixels to rem
/// @param {Number} $pixels - The pixel value to convert
/// @param {Number} $base-font-size [16] - The base font size in pixels
/// @return {Number} - The rem value
@function rem($pixels, $base-font-size: 16) {
  @return ($pixels / $base-font-size) * 1rem;
}

/// Convert pixels to em
/// @param {Number} $pixels - The pixel value to convert
/// @param {Number} $base-font-size [16] - The base font size in pixels
/// @return {Number} - The em value
@function em($pixels, $base-font-size: 16) {
  @return ($pixels / $base-font-size) * 1em;
}

/// Calculate spacing based on our spacing scale
/// @param {Number} $multiplier - Multiplier for the base spacing unit
/// @return {Number} - The spacing value in rem
@function spacing($multiplier) {
  @return $multiplier * 0.25rem;
}

/// Create fluid responsive values that scale between viewport widths
/// @param {Number} $min-value - The minimum value
/// @param {Number} $max-value - The maximum value
/// @param {Number} $min-vw - The minimum viewport width
/// @param {Number} $max-vw - The maximum viewport width
/// @return {String} - CSS calc() function with responsive formula
@function fluid($min-value, $max-value, $min-vw: 320, $max-vw: 1440) {
  $factor: ($max-value - $min-value) / ($max-vw - $min-vw);
  $offset: $min-value - $factor * $min-vw;
  
  @return calc(#{$offset} + #{100 * $factor}vw);
}

// Map and list functions

/// Get a value from a nested map
/// @param {Map} $map - The map to traverse
/// @param {Arglist} $keys - Keys to access
/// @return {*} - Retrieved value
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

/// Get a value from a map with a fallback
/// @param {Map} $map - The map to get the value from
/// @param {String} $key - The key to look for in the map
/// @param {*} $fallback - The fallback value if the key doesn't exist
/// @return {*} - The value or fallback
@function map-get-or($map, $key, $fallback) {
  @if map-has-key($map, $key) {
    @return map-get($map, $key);
  }
  @return $fallback;
}

// String functions

/// Append a suffix to a string only if it doesn't already have it
/// @param {String} $string - The original string
/// @param {String} $suffix - The suffix to add
/// @return {String} - The resulting string
@function append-suffix-if-missing($string, $suffix) {
  $string-length: str-length($string);
  $suffix-length: str-length($suffix);
  
  @if $string-length >= $suffix-length {
    $end-part: str-slice($string, $string-length - $suffix-length + 1, $string-length);
    
    @if $end-part == $suffix {
      @return $string;
    }
  }
  
  @return $string + $suffix;
}

/// Remove unit from a value
/// @param {Number} $value - The value with unit
/// @return {Number} - The value without unit
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}
